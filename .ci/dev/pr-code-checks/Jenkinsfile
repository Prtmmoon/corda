#!groovy
/**
 * Jenkins pipeline to run basic code checks.
 */

/**
 * Kill already started job.
 * Assume new commit takes precedence and results from previous
 * unfinished builds are not required.
 * This feature doesn't play well with disableConcurrentBuilds() option
 */
@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob

killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

/*
 * A placeholder of computed NexusIQ application id
 */

def nexusAppId = null

pipeline {
    agent { label 'standard' }
    options {
        timestamps()
        timeout(time: 3, unit: 'HOURS')
    }

    stages {
        stage('Detekt check') {
            steps {
                sh "./gradlew --no-daemon clean detekt"
            }
        }

        stage('Compilation warnings check') {
            steps {
                sh "./gradlew --no-daemon -Pcompilation.warningsAsErrors=true compileAll"
            }
        }

        stage('Sonatype Check') {
            steps {
                sh "./gradlew --no-daemon -Pcompilation.warningsAsErrors=false jar"
                script {
                    sh "./gradlew  --no-daemon properties | grep -E '^(version|group):' >version-properties"
                    def version = sh (returnStdout: true, script: "grep ^version: version-properties | sed -e 's/^version: //'").trim()
                    def groupId = sh (returnStdout: true, script: "grep ^group: version-properties | sed -e 's/^group: //'").trim()
                    def artifactId = 'corda'
                    nexusAppId = "jenkins-${groupId}-${artifactId}-${version}-PR"
                }
                nexusPolicyEvaluation (
                        failBuildOnNetworkError: false,
                        iqApplication: manualApplication(nexusAppId),
                        iqScanPatterns: [[scanPattern: 'node/capsule/build/libs/corda*.jar']],
                        iqStage: 'build'
                )
            }
        }

        stage('No API change check') {
            steps {
                sh "./gradlew --no-daemon generateApi"
                sh ".ci/check-api-changes.sh"
            }
        }

        stage('Deploy Nodes') {
            steps {
                sh "./gradlew --no-daemon jar deployNodes"
            }
        }
    }

    post {
        cleanup {
            deleteDir() /* clean up our workspace */
        }
    }
}
